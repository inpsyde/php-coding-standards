<?xml version="1.0"?>
<ruleset name="Inpsyde PHP Coding Standard">

    <description>PHP 7+ coding standards for Inpsyde WordPress projects.</description>

    <!--
    PSR 12 Code style.
    See http://www.php-fig.org/psr/psr-12/
    -->
    <rule ref="PSR12">
        <exclude name="Generic.Files.LineLength.TooLong"/>
    </rule>
    <rule ref="PSR12.Operators.OperatorSpacing.NoSpaceBefore">
        <type>warning</type>
    </rule>

    <!--
    Curated list of WordPress specific rules.
    See https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards
    -->
    <rule ref="WordPress.CodeAnalysis.AssignmentInTernaryCondition"/>
    <rule ref="WordPress.CodeAnalysis.EscapedNotTranslated"/>
    <rule ref="WordPress.DB.PreparedSQLPlaceholders"/>
    <rule ref="WordPress.DB.PreparedSQL"/>
    <rule ref="WordPress.DB.RestrictedClasses"/>
    <rule ref="WordPress.DB.RestrictedFunctions"/>
    <rule ref="WordPress.DateTime.CurrentTimeTimestamp"/>
    <rule ref="WordPress.DateTime.RestrictedFunctions">
        <properties>
            <property name="exclude" type="array" value="date"/>
        </properties>
    </rule>
    <rule ref="WordPress.NamingConventions.PrefixAllGlobals"/>
    <rule ref="WordPress.NamingConventions.ValidHookName">
        <properties>
            <property name="additionalWordDelimiters" value="-/."/>
        </properties>
    </rule>
    <rule ref="WordPress.NamingConventions.ValidPostTypeSlug"/>
    <rule ref="WordPress.PHP.DevelopmentFunctions"/>
    <rule ref="WordPress.PHP.DevelopmentFunctions.error_log">
        <type>error</type>
    </rule>
    <rule ref="WordPress.PHP.DevelopmentFunctions.prevent_path_disclosure">
        <type>error</type>
    </rule>
    <rule ref="WordPress.PHP.RestrictedPHPFunctions"/>
    <rule ref="WordPress.PHP.DiscouragedPHPFunctions">
        <properties>
            <property name="exclude" type="array" value="serialize,urlencode,obfuscation"/>
        </properties>
    </rule>
    <rule ref="WordPress.PHP.DiscouragedPHPFunctions.runtime_configuration">
        <type>error</type>
    </rule>
    <rule ref="WordPress.PHP.DontExtract"/>
    <rule ref="WordPress.PHP.IniSet"/>
    <rule ref="WordPress.PHP.NoSilencedErrors"/>
    <rule ref="WordPress.PHP.POSIXFunctions"/>
    <rule ref="WordPress.PHP.PregQuoteDelimiter"/>
    <rule ref="WordPress.PHP.RestrictedPHPFunctions"/>
    <rule ref="WordPress.PHP.StrictInArray"/>
    <rule ref="WordPress.PHP.TypeCasts"/>
    <rule ref="WordPress.Security.EscapeOutput"/>
    <rule ref="WordPress.Security.NonceVerification"/>
    <rule ref="WordPress.Security.PluginMenuSlug"/>
    <rule ref="WordPress.Security.SafeRedirect"/>
    <rule ref="WordPress.Security.ValidatedSanitizedInput"/>
    <rule ref="WordPress.WP.AlternativeFunctions.curl"/>
    <rule ref="WordPress.WP.AlternativeFunctions.file_get_contents"/>
    <rule ref="WordPress.WP.AlternativeFunctions.file_system_read"/>
    <rule ref="WordPress.WP.AlternativeFunctions.strip_tags"/>
    <rule ref="WordPress.WP.AlternativeFunctions.rand_seeding"/>
    <rule ref="WordPress.WP.AlternativeFunctions.rand"/>
    <rule ref="WordPress.WP.CapitalPDangit"/>
    <rule ref="WordPress.WP.DeprecatedClasses"/>
    <rule ref="WordPress.WP.DeprecatedFunctions"/>
    <rule ref="WordPress.WP.DeprecatedParameters"/>
    <rule ref="WordPress.WP.DeprecatedParameterValues"/>
    <rule ref="WordPress.WP.DiscouragedConstants"/>
    <rule ref="WordPress.WP.DiscouragedFunctions"/>
    <rule ref="WordPress.WP.EnqueuedResourceParameters"/>
    <rule ref="WordPress.WP.EnqueuedResources"/>
    <rule ref="WordPress.WP.I18n"/>

    <!--
    Curated list of WordPress VIP rules.
    See https://github.com/Automattic/VIP-Coding-Standards/
    -->
    <rule ref="WordPressVIPMinimum.Classes.DeclarationCompatibility"/>
    <rule ref="WordPressVIPMinimum.Constants.ConstantString"/>
    <rule ref="WordPressVIPMinimum.Constants.RestrictedConstants"/>
    <rule ref="WordPressVIPMinimum.Files.IncludingNonPHPFile"/>
    <rule ref="WordPressVIPMinimum.Functions.CheckReturnValue"/>
    <rule ref="WordPressVIPMinimum.Functions.DynamicCalls"/>
    <rule ref="WordPressVIPMinimum.Functions.StripTags"/>
    <rule ref="WordPressVIPMinimum.Hooks.AlwaysReturnInFilter"/>
    <rule ref="WordPressVIPMinimum.Hooks.PreGetPosts"/>
    <rule ref="WordPressVIPMinimum.Performance.CacheValueOverride"/>
    <rule ref="WordPressVIPMinimum.Performance.RegexpCompare"/>
    <rule ref="WordPressVIPMinimum.Performance.TaxonomyMetaInOptions"/>
    <rule ref="WordPressVIPMinimum.Security.EscapingVoidReturnFunctions"/>
    <rule ref="WordPressVIPMinimum.Security.ExitAfterRedirect"/>
    <rule ref="WordPressVIPMinimum.Security.PHPFilterFunctions"/>
    <rule ref="WordPressVIPMinimum.Security.ProperEscapingFunction"/>
    <rule ref="WordPressVIPMinimum.Security.StaticStrreplace"/>
    <rule ref="VariableAnalysis.CodeAnalysis.VariableAnalysis">
        <exclude name="VariableAnalysis.CodeAnalysis.VariableAnalysis.UnusedVariable" />
    </rule>

    <!--
    PHPCS Extra
    -->
    <rule ref="NormalizedArrays.Arrays.CommaAfterLast" />
    <rule ref="Universal.Operators.StrictComparisons" />
    <rule ref="Universal.WhiteSpace.PrecisionAlignment" />

    <!--
    Slevomat
    -->
    <rule ref="SlevomatCodingStandard.Functions.ArrowFunctionDeclaration">
        <type>warning</type>
        <properties>
            <property name="allowMultiLine" type="boolean" value="yes"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes">
        <properties>
            <property name="spacesCountAroundEqualsSign" type="integer" value="0"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Whitespaces.DuplicateSpaces">
        <type>warning</type>
        <properties>
            <property type="boolean" name="ignoreSpacesInComment" value="yes" />
        </properties>
    </rule>

    <!--
    Generic
    -->
    <rule ref="Generic.Arrays.DisallowLongArraySyntax">
        <type>warning</type>
    </rule>
    <rule ref="Generic.CodeAnalysis.AssignmentInCondition"/>
    <rule ref="Generic.CodeAnalysis.EmptyPHPStatement"/>
    <rule ref="Generic.Metrics.CyclomaticComplexity">
        <properties>
            <property name="absoluteComplexity" value="50"/>
        </properties>
    </rule>
    <rule ref="Generic.NamingConventions.ConstructorName"/>
    <rule ref="Generic.PHP.CharacterBeforePHPOpeningTag"/>
    <rule ref="Generic.PHP.LowerCaseConstant"/>
    <rule ref="Generic.VersionControl.GitMergeConflict"/>
    <rule ref="Generic.WhiteSpace.ArbitraryParenthesesSpacing">
        <type>warning</type>
        <properties>
            <property type="boolean" name="ignoreNewlines" value="yes" />
        </properties>
    </rule>
    <rule ref="Generic.WhiteSpace.LanguageConstructSpacing"/>
    <rule ref="Generic.WhiteSpace.SpreadOperatorSpacingAfter"/>
    <rule ref="Squiz.Classes.LowercaseClassKeywords"/>
    <rule ref="Squiz.PHP.CommentedOutCode">
        <properties>
            <property name="maxPercentage" value="45"/>
        </properties>
    </rule>
    <rule ref="Squiz.Functions.MultiLineFunctionDeclaration">
        <type>warning</type>
    </rule>
    <rule ref="Squiz.PHP.Eval"/>
    <rule ref="Squiz.PHP.InnerFunctions"/>
    <rule ref="Squiz.PHP.LowercasePHPFunctions"/>
    <rule ref="Squiz.PHP.NonExecutableCode"/>
    <rule ref="Squiz.Scope.MemberVarScope"/>
    <rule ref="Squiz.Scope.StaticThisUsage"/>
    <rule ref="Squiz.WhiteSpace.FunctionSpacing">
        <type>warning</type>
        <properties>
            <property name="spacing" value="1"/>
            <property name="spacingBeforeFirst" value="0"/>
            <property name="spacingAfterLast" value="0"/>
        </properties>
    </rule>

    <!--
    PHPCompatibility
    -->
    <rule ref="PHPCompatibility"/>

</ruleset>
